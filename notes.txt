App.js
- const [comment, setComments] = React.useState(data.comments) //the array
- send the data as props to comments and newComment
<Comments comments ={comments} setComment={setComments}>

commentList.js
- receive props from App.js and map the array, pass it to comment.js

comment.js
- take in props from commentList.js and create individual comment cards
- if there is replies on that comment, pass data to REPLIES.JS to do mapping

REPLYLIST.JS
- receives props from COMMENT.JS and does mapping, then pass it to REPLY.JS

REPLY.JS
- receives props from REPLYLIST.JS and creates indiv reply cards
- button for users to reply on this reply

COMMENTFORM.JS - new comment form + add current user's comment to comment array in APP.JS
- receive props from App.js
- declare a useState variable of newContent, setNewContent
- when user clicks on submit, create a newComment and push it to the app's comments using setComments
- COMMENT.JS will then take this updated comment and map it, then pass it to COMMENT.JS

REPLYFORM.JS
- receives replies array from COMMENT.JS
- when user submits the reply, update the reply array with the new reply
- create a new reply and concat it to reply array
  - used global state context to access currentUser from this component

CREATING A REPLY LOOP
# COMMENT.JS: when i reply on a comment, REPLYFORM.JS is rendered and the comment is added to {commentReplies}
# REPLYLIST takes the updated {commentReplies} and map it out to pass each reply to REPLY.JS
#

DELETE A COMMENT (if it belongs to user)
- add delete button if comment belongs to user
- if user clicks on delete, access global state COMMENTS and filter it, excluding the comment with the selected ID
- updated the global comments state from the COMMENT.JS

DELETE A REPLY (on a comment)
- from replyList, pass in the replies array + setReplies function to reply
- when reply is deleted, filter out that reply from the replies array using ID
- use the function to update the replies array, which causes REPLYLIST.JS to remap the updated array

DELETE A REPLY (on a reply)
- from REPLY.js, when user clicks on reply (on reply), we render REPLYFORM.JS which will update the reply replies array
- REPLYLIST will then take the updated array and map it to reply
- REPLYLIST also passes function to update replies array to REPLY.JS
- REPLY.JS could then filter out the deleted reply on the reply and update the array, which will be sent to REPLYLIST to get mapped back

getting reply form to disappear after i submit
- set a useImmer state, if is true, change the class to hidden

edit comment
- click on edit in COMMENT.JS and render EditComment.js
- grab the current content, pass props from COMMENT.JS



- when user clicks on edit post, routes them to <edit post> 
- useReducer
    - original state: content, sendCount
    - useEffect to get the post content, then update the original state with the current content
    - when user clicks on submit, sendCount increases
    - when sendCount increases, post request sent to save edited post
- editpost.js
  - render the form again, 